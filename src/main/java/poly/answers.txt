CSE 331 Homework 4.  Answers to written questions.
Edit this file to supply your answers.

Name:  Julian Gallegos

Problem 0.

(a)
r = p * q:
    // Let f be an array of polynomials gathered through multiplication of terms in p and q.
    set f[] = array of size equal to number of terms in p
    declare and set index = 0
    {Inv: f = {p_0*q_0+p_0*q_1+ ... +p_0*q_(k), ... , p_(j)*q_0+ ... +p_(j)*q_(k)},
            where p_j is the jth term in p and q_k is the kth term in q}
    {Inv: f = {p_0*q_0+p_0*q_1+ ... +p_0*q_(i-1), ... , p_(i-1)*q_0+ ... +p_(i-1)*q_(i-1)},
            where p_j is the jth term in p and q_k is the kth term in q}
    foreach term, t_p, in p:
        {Inv: f[index] = t_p*q_0 + t_p*q_1 + ... + t_p*q_(k), where q_k is the kth term in q}
        foreach term t_q, in q:
            add the product of t_p and t_q to f[index].
            // for getting product of two terms, Coefficient of each term is multiplied together,
            // degree of each term is added together.
            // as list expands through adding products, each term should have a different degree,
            // unless the input polynomials had unsimplified terms, in which case simplification
            // would be needed here.
        index = index + 1
    set r = f[0] by making a term-by-term copy of all items in f[0] to r
    {Inv: r = f[0] + f[1] + ... + f[i-1], where f[j] is the jth polynomial in f}
    foreach polynomial element t_f, in f:
        r = polyAdd(r, t_f)  // polynomial addition pseudo code in example.


(b)
r = p / q:
    // Seems as though checking this may not matter for this assignment.
    Check that polynomials are in descending order
        if not in descending order, sort
        continue
      // Or whatever makes sense for iterating through the polynomial
    Assume that the passed values of p and q are not references to original p and q, but instead are copies of them.
    let r be an empty polynomial
    declare current term for term to multiply in r for the loop.
    declare temp polynomial
    if (leading term in q is zero) {  // same as saying if q is zero
        return not a number, or something of the sort
    }
    {Inv: }
    while (degree of leading term of p >= degree of leading term of q) {
        // take highest degree term of p with coefficient > 0 and divide by highest degree term of q with coefficient > 0
        r += highest degree term of p divided by highest degree term of q
        current = the same value that was just added to r.
        set temp to the multiplication of current and q
        set p to the the subtraction of temp from p
        // Implementation might want to include a pointer to the highest term in new p, and reset it here?
        repeat
    }
    return r

    notes:
    p/q
    Assume arguments p and q for this method are copied for use in method.

    1.) take highest degree term from p and divide by highest degree term from q
            1b.) store value from part 1 to the polynomial value r by adding it, will return r at end.
    2.) multiply new term in r by each of the terms in q, store in temporary polynomial t. // keep track of new r term with counter variable?
            2b.) use polynomial multiplication method from part a.
    3.) subtract t from  p, set local p to this new polynomial.
            3b.) use polynomial addition method from example.
    4.) repeat steps 1 through 3.
            4b.) stop when newest addition to polynomial r has a degree of 1 or t runs out of terms.


(c)
(x^3+x-1) / (x+1) = x^2-x+2
p           q
r = empty polynomial set of terms.
declare current as nothing for now.
declare temp polynomial as nothing for now.

r += { p.leadingTerm->(1x^3) / q.leadingTerm->(1x) } = 1x^2.
current = 1x^2.
temp = polyMultiplication(current, q) = { 1x^3 + 1x^2 }.
p = PolyAdd(p, -temp) = { 0x^3 - 1x^2 + 1x - 1 }.
new leading/highest degree term for p is -1x^2
highest degree of p is >= highest degree of q, so repeat loop

r += { p.leadingTerm->(-1x^2) / q.leadingTerm->(1x) } = { 1x^2 - 1x }.
current = -1x.
temp = polyMultiplication(current, q) = { -1x^2 - 1x }.
p = PolyAdd(p, -temp) = { 0x^2 + 2x - 1 }.
new leading/highest degree term for p is 2x
highest degree of p is >= highest degree of q, so repeat loop

r += { p.leadingTerm->(2x) / q.leadingTerm->(1x) } = { 1x^2 - 1x + 2 }.
current = 2.
temp = polyMultiplication(current, q) = { 2x + 2 }.
p = PolyAdd(p, -temp) = { 0x - 3 }.
new leading/highest degree term for p is -3
highest degree of p is < highest degree of q, so loop is finished

r = { x^2 - x + 2}

Problem 1.

(a)
equals method would not work. It compares the numerators of the two objects and the denominators of the two objects.
    Would need to convert each objects' values to reduced form to guarantee that the comparision is accurate.
    Checking and possibly reducing the numer and denom values every time equals is called would slow the method
    execution time down, but overall the class will run faster as it will not need to check these values each time new
    values are set, so long as equals is not called too often.

toString spec requires that it is in reduced form, so we would need to check that it is in reduced form, and if it is
    not in reduced form, would need to convert it for the method. Like equals, if toString is not called too often, this
    will lead to an overall faster program.

checkRep asserts that the representation invariant is not being violated, so it would need to be updated with the
    weakened rep invariant. This will always be faster with the new rep invariant, as it has less to check. The
    efficiency of this rep invariant depends on the frequency of calls to equals and toString, with more calls
    to them leading to lower speed compared to the old rep invariant.

(b)
This does not respect the spec of the overall class that states that RatNum represents an IMMUTABLE rational number,
meaning that its values will not me modified.
None of its methods specifically state that it must be immutable, but as is required of the spec, all methods must
also respect it.

(c)
RatNum represents an immutable rational number, and therefore it has no mutator methods for its values numer and denom.
The only time that these values are set is on the declaration of a new object through this class' constructor, and
therefore the object only needs to call checkRep when it is newly created with unchecked values.

Problem 2.

(a)


(b)


(c)


Problem 3.


Problem 5.
