CSE 331 Homework.  Answers to written questions.
Edit this file to supply your answers.

Name:  <replace this with your name>

Problem 1. (Written exercises)

(a)
IntQueue1.java :

Representation Invariant:
  For any index i such that 0 <= i < size(): entries.get(i) != null
  entries != null

Abstraction Function:
  AF(r) = a first-in first-out queue of integers, q, such that
  q.front = r.entries.get(0)
  q.back = r.entries.get(r.size() - 1)


IntQueue2.java :

Representation Invariant:
  For any index i such that front <= i < size: entries.get(i) != null
  entries != null

Abstraction Function:
  AF(r) = a first-in first-out queue, q, such that
  q.front = r.entries.get(r.front)
  q.back = r.entries.get(r.front + r.size - 1)

(b)
a == d == g
b == h
c == f
e == e and nothing else

(c)
1)
Returns a primitive data type, instead of an object, so there is no threat of
representation exposure.

2)
decode returns a String[], which will not be able to access any data from the
class that decode comes from, this is similar to returning a primitive data type
in that the data returned is now independent from the class it came from.

3)
As myBirthday is private, and it does not take input parameters, appearing to be a get method
of some sort, we can be assured that the client cannot expose the representation.

4)
toString does not modify anything, nor does it have any sub methods that could access
an object. Therefore there is no possibility of representation exposure.

5)
elements is declared public, therefore each of its methods can be accessed.
If any of these methods would go against a rep invariant, then that means there
is a chance of representation exposure.

6)
If the list we are passing into Deck is passed by reference, and we are
not copying every value to a new list, then the client potentially could
access and modify the list without using Deck's methods. Therefore there is
a possibility of representation exposure.

Problem 2.  (Graph interface/operations)

Graph Class:
This is the main class that clients will use, important for actually constructing and viewing some
information for a graph.

Graph():
Need a way to initialize a Graph. An empty graph list may not be remarkable, but it is good to have a base case.

Graph(String node):
Similar to Graph(), adds a node to initialization as I expect a client will likely start adding Nodes anyway.

addNode():
No point in having a graph is there is no way to add Nodes to the graph.

addEdge(String parent, String child, String edge):
Need edges for a graph.

removeNode(String name):
I believe the graph should undergo any kind of change as needed, so removing a Node comes naturally from this idea.

removeEdge(String parent, String child, String edge):
Same logic as removeNode.

nodeExists(String nodeName):
More a sanity check than anything else, particularly useful for testing/debugging.

listChildren(Node a):
Seems like a useful method for navigating a graph.

listOutEdges(Node a):
More detailed navigation tool, similar to listChildren.
I believe more information is not always better, so listChildren is still an option.

listNodes():
Not totally necessary for a functioning graph, but it seems useful for keeping track of information.

clear():
The graph is mutable, so allowing it to be reused instead of creating another graph object makes sense.

nodeCount():
Useful for testing, also probably useful to have a return value for the node count for future implementation purposes.


Node class:
This class stores most of the information that the Graph class uses. Intended to be used in a private list in
Graph, holds data that I don't want the client to have access to. Also simplifies the the information that the
client sees in the Graph class.

Node(String name):
Initializer for a Node is required for the class to function.
I require that every Node have a unique name, so this is the only constructor (no empty parameter constructor).

getEdges():
The Graph class has a private list of Nodes, so it needs public methods to get Node data.
This method is not giving data that would allow modification of the Node class, but does make
viewing information about the Node class easier.

getName():
Same logic as getEdges(), particularly important for removing nodes and edges from the Graph,
as those methods require the names of Nodes to work.

addEdge();
Needed to use the Graph's method with the same name.

A basic graph needs tools to build itself, as well as tools for representing the data in an informative way.
With that in mind I think this interface does exactly that.
Some methods, like listChildren, may end up being unnecessary, but I still consider them valuable enough to keep
for now. Other methods, like nodeCount() and nodeExists() are useful for testing, and may see some use in implementation
as well.
I will likely make changes as I move on to the implementation and beyond.

Problem 3.  (Testing strategy)




